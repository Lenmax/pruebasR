[{"C:\\Users\\UNSAAC\\Documents\\GitHub\\pruebasR\\prue-app\\src\\GetStepContent.js":"1","C:\\Users\\UNSAAC\\Documents\\GitHub\\pruebasR\\prue-app\\src\\data.js":"2","C:\\Users\\UNSAAC\\Documents\\GitHub\\pruebasR\\prue-app\\src\\App.js":"3","C:\\Users\\UNSAAC\\Documents\\GitHub\\pruebasR\\prue-app\\src\\index.js":"4"},{"size":16902,"mtime":1612292124915,"results":"5","hashOfConfig":"6"},{"size":8806,"mtime":1612290781076,"results":"7","hashOfConfig":"6"},{"size":11155,"mtime":1611688741080,"results":"8","hashOfConfig":"6"},{"size":298,"mtime":1611665480322,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"a4j3ze",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\UNSAAC\\Documents\\GitHub\\pruebasR\\prue-app\\src\\GetStepContent.js",["19","20","21","22","23","24","25","26","27","28","29","30","31","32","33"],"C:\\Users\\UNSAAC\\Documents\\GitHub\\pruebasR\\prue-app\\src\\data.js",[],"C:\\Users\\UNSAAC\\Documents\\GitHub\\pruebasR\\prue-app\\src\\App.js",["34","35","36","37"],"import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  CssBaseline,\r\n  makeStyles,\r\n  Container,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  withStyles,\r\n  StepConnector,\r\n  StepContent,\r\n  Button,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Chip,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\r\nimport AssignmentIndIcon from \"@material-ui/icons/AssignmentInd\";\r\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\r\nimport AssignmentTurnedInIcon from \"@material-ui/icons/AssignmentTurnedIn\";\r\nimport AttachmentIcon from \"@material-ui/icons/Attachment\";\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport GetStepContent from \"./GetStepContent\";\r\n\r\nimport * as dataAPI from './data';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  principalContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(3, 0, 6),\r\n  },\r\n  contentStep: {\r\n    marginTop: \"2em\",\r\n  },\r\n  mb1: {\r\n    marginBottom: \"1em\",\r\n  },\r\n}));\r\n\r\nconst ColorlibConnector = withStyles({\r\n  alternativeLabel: {\r\n    top: 22,\r\n  },\r\n  active: {\r\n    \"& $line\": {\r\n      backgroundImage:\r\n        \"linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)\",\r\n    },\r\n  },\r\n  completed: {\r\n    \"& $line\": {\r\n      backgroundImage:\r\n        \"linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)\",\r\n    },\r\n  },\r\n  line: {\r\n    height: 3,\r\n    border: 0,\r\n    backgroundColor: \"#eaeaf0\",\r\n    borderRadius: 1,\r\n  },\r\n})(StepConnector);\r\nconst useColorlibStepIconStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: \"#ccc\",\r\n    zIndex: 1,\r\n    color: \"#fff\",\r\n    width: 50,\r\n    height: 50,\r\n    display: \"flex\",\r\n    borderRadius: \"50%\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  active: {\r\n    backgroundImage:\r\n      \"linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)\",\r\n    boxShadow: \"0 4px 10px 0 rgba(0,0,0,.25)\",\r\n  },\r\n  completed: {\r\n    backgroundImage:\r\n      \"linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)\",\r\n  },\r\n});\r\nfunction ColorlibStepIcon(props) {\r\n  const classes = useColorlibStepIconStyles();\r\n  const { active, completed } = props;\r\n\r\n  const icons = {\r\n    1: <ListAltIcon />,\r\n    2: <AssignmentIndIcon />,\r\n    3: <AttachFileIcon />,\r\n    4: <AssignmentTurnedInIcon />,\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, {\r\n        [classes.active]: active,\r\n        [classes.completed]: completed,\r\n      })}\r\n    >\r\n      {icons[String(props.icon)]}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getSteps() {\r\n  return [\r\n    \"Seleccionar Tramite\",\r\n    \"Datos del Interesado\",\r\n    \"Adjuntar Requisitos\",\r\n    \"Verificar\",\r\n  ];\r\n}\r\n\r\nconst getStepContent = (step, handleNext) => {\r\n  switch (step) {\r\n    case 0:\r\n      return (\r\n        <>\r\n          <Grid item xs={12} style={{ marginBottom: \"1em\" }}>\r\n            <Typography variant=\"subtitle2\" align=\"right\">\r\n              Buscador\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TableContainer component={Paper}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell align=\"center\">Codigo</TableCell>\r\n                    <TableCell align=\"center\">Tramite</TableCell>\r\n                    <TableCell align=\"center\">Requisitos</TableCell>\r\n                    <TableCell align=\"center\">Tiempo Estimado</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  <TableRow hover onClick={handleNext}>\r\n                    <TableCell align=\"center\">0125489</TableCell>\r\n                    <TableCell>Certificado de Estudios</TableCell>\r\n                    <TableCell>\r\n                      <List dense>\r\n                        <ListItem>\r\n                          <ListItemIcon>\r\n                            <AttachmentIcon />\r\n                          </ListItemIcon>\r\n                          <ListItemText primary=\"Solicitud Dirigida al Rector\" />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                          <ListItemIcon>\r\n                            <AttachmentIcon />\r\n                          </ListItemIcon>\r\n                          <ListItemText primary=\"Certificados de estudios secundarios conscluidos en original\" />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                          <ListItemIcon>\r\n                            <AttachmentIcon />\r\n                          </ListItemIcon>\r\n                          <ListItemText primary=\"Certificado de acreditacion expendio...\" />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                          <ListItemIcon>\r\n                            <AttachmentIcon />\r\n                          </ListItemIcon>\r\n                          <ListItemText primary=\"Certificado electronco de no tener atecendentes penales\" />\r\n                        </ListItem>\r\n                      </List>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">80 minutos</TableCell>\r\n                  </TableRow>\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Grid>\r\n        </>\r\n      );\r\n    case 1:\r\n      return (\r\n        <>\r\n          <Grid item md={6}>\r\n            <Autocomplete\r\n              id=\"TipoDocumento\"\r\n              options={tipoDocumentos}\r\n              getOptionLabel={(option) => option.tipodocumentoidentidad}\r\n              style={{ width: \"100%\" }}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  label=\"Tipo Documento\"\r\n                  variant=\"outlined\"\r\n                />\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item md={6}>\r\n            <TextField\r\n              id=\"NroDocumento\"\r\n              label=\"Nro de Documento\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              id=\"Nombre\"\r\n              label=\"Nombre\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              defaultValue=\"Nombre Completo\"\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item md={6}>\r\n            <TextField\r\n              id=\"Telefono\"\r\n              label=\"Telefono\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item md={6}>\r\n            <TextField id=\"Email\" label=\"Email\" variant=\"outlined\" fullWidth />\r\n          </Grid>\r\n        </>\r\n      );\r\n    case 2:\r\n      return \"Adjuntar Requisitos\";\r\n    case 3:\r\n      return \"Verificar\";\r\n    default:\r\n      return \"Desconocido\";\r\n  }\r\n};\r\n\r\n\r\nlet tipoDocumentos = [];\r\nconst App = () => {\r\n  const classes = useStyles();\r\n\r\n  const steps = getSteps();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n\r\n  const handleNext = () => {\r\n     setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setActiveStep(0);\r\n  };\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n            Sistema de Tramite Administrativo\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main>\r\n        <div className={classes.principalContent}>\r\n          <Container spacing={2} justify=\"center\">\r\n            <Grid>\r\n              <Card>\r\n                <CardContent className={classes.root}>\r\n                  <Stepper\r\n                    alternativeLabel\r\n                    activeStep={activeStep}\r\n                    connector={<ColorlibConnector />}\r\n                  >\r\n                    {steps.map((label) => (\r\n                      <Step key={label}>\r\n                        <StepLabel StepIconComponent={ColorlibStepIcon}>\r\n                          {label}\r\n                        </StepLabel>\r\n                      </Step>\r\n                    ))}\r\n                  </Stepper>\r\n                  <>\r\n                    {activeStep === steps.length ? (\r\n                      <div>\r\n                        <Typography className={classes.instructions}>\r\n                          All steps completed - you&apos;re finished\r\n                        </Typography>\r\n                        <Button\r\n                          onClick={handleReset}\r\n                          className={classes.button}\r\n                        >\r\n                          Reset\r\n                        </Button>\r\n                      </div>\r\n                    ) : (\r\n                      <Grid\r\n                        container\r\n                        spacing={3}\r\n                        direction=\"row\"\r\n                        justify=\"center\"\r\n                        className={classes.contentStep}\r\n                        //alignItems=\"center\"\r\n                      >\r\n                        <Grid container spacing={3} item xs={12}>\r\n                          {/* {getStepContent(activeStep, handleNext) */}\r\n                          <GetStepContent\r\n                            step={activeStep}\r\n                            handleNext={handleNext}\r\n                          />\r\n                        </Grid>\r\n                        <Grid container item xs={12} justify=\"center\">\r\n                          <Button\r\n                            disabled={activeStep === 0}\r\n                            onClick={handleBack}\r\n                            className={classes.button}\r\n                          >\r\n                            Paso Anterior\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={handleNext}\r\n                            className={classes.button}\r\n                          >\r\n                            {activeStep === steps.length - 1\r\n                              ? \"Finalizar\"\r\n                              : \"Siguiente\"}\r\n                          </Button>\r\n                        </Grid>\r\n                      </Grid>\r\n                    )}\r\n                  </>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Container>\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\UNSAAC\\Documents\\GitHub\\pruebasR\\prue-app\\src\\index.js",[],{"ruleId":"38","severity":1,"message":"39","line":1,"column":38,"nodeType":"40","messageId":"41","endLine":1,"endColumn":44},{"ruleId":"38","severity":1,"message":"42","line":4,"column":3,"nodeType":"40","messageId":"41","endLine":4,"endColumn":14},{"ruleId":"38","severity":1,"message":"43","line":28,"column":8,"nodeType":"40","messageId":"41","endLine":28,"endColumn":14},{"ruleId":"38","severity":1,"message":"44","line":31,"column":7,"nodeType":"40","messageId":"41","endLine":31,"endColumn":12},{"ruleId":"45","severity":1,"message":"46","line":76,"column":128,"nodeType":"47","messageId":"48","endLine":76,"endColumn":129},{"ruleId":"49","severity":1,"message":"50","line":139,"column":33,"nodeType":"51","messageId":"52","endLine":139,"endColumn":35},{"ruleId":"49","severity":1,"message":"53","line":178,"column":70,"nodeType":"51","messageId":"52","endLine":178,"endColumn":72},{"ruleId":"49","severity":1,"message":"50","line":180,"column":21,"nodeType":"51","messageId":"52","endLine":180,"endColumn":23},{"ruleId":"54","severity":1,"message":"55","line":226,"column":90,"nodeType":"56","messageId":"57","endLine":226,"endColumn":118,"fix":"58"},{"ruleId":"49","severity":1,"message":"53","line":310,"column":56,"nodeType":"51","messageId":"52","endLine":310,"endColumn":58},{"ruleId":"49","severity":1,"message":"53","line":312,"column":69,"nodeType":"51","messageId":"52","endLine":312,"endColumn":71},{"ruleId":"49","severity":1,"message":"53","line":419,"column":42,"nodeType":"51","messageId":"52","endLine":419,"endColumn":44},{"ruleId":"49","severity":1,"message":"53","line":421,"column":55,"nodeType":"51","messageId":"52","endLine":421,"endColumn":57},{"ruleId":"49","severity":1,"message":"53","line":450,"column":89,"nodeType":"51","messageId":"52","endLine":450,"endColumn":91},{"ruleId":"49","severity":1,"message":"53","line":450,"column":159,"nodeType":"51","messageId":"52","endLine":450,"endColumn":161},{"ruleId":"38","severity":1,"message":"59","line":18,"column":3,"nodeType":"40","messageId":"41","endLine":18,"endColumn":14},{"ruleId":"38","severity":1,"message":"60","line":31,"column":3,"nodeType":"40","messageId":"41","endLine":31,"endColumn":7},{"ruleId":"38","severity":1,"message":"61","line":43,"column":13,"nodeType":"40","messageId":"41","endLine":43,"endColumn":20},{"ruleId":"38","severity":1,"message":"62","line":146,"column":7,"nodeType":"40","messageId":"41","endLine":146,"endColumn":21},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'CssBaseline' is defined but never used.","'notify' is defined but never used.","'axios' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-whitespace-before-property","Unexpected whitespace before property lastIndexOf.","MemberExpression","unexpectedWhitespace",{"range":"63","text":"64"},"'StepContent' is defined but never used.","'Chip' is defined but never used.","'dataAPI' is defined but never used.","'getStepContent' is assigned a value but never used.",[6516,6518],"."]